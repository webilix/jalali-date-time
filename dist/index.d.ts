export { JalaliDateTimeOptions } from './interface/options';
export { JalaliDateTimeConfig } from './interface/config';
export { JalaliDateTimeObject } from './interface/object';
export { JalaliDateTimeCalendar, JalaliDateTimeCalendarDay } from './interface/calendar';
export { JalaliDateTimeGregorian } from './interface/gregorian';
export { JalaliDateTimePeriod } from './interface/period';
import { now } from './lib/now';
import { toDate } from './lib/date';
import { toString } from './lib/string';
import { toFullText } from './lib/full-text';
import { toObject } from './lib/object';
import { dayOfWeek } from './lib/day-of-week';
import { daysInMonth } from './lib/days-in-month';
import { calendar } from './lib/calendar';
import { nextDay, nextDayOfWeek } from './lib/next/day-of-week';
import { nextMonth, nextDayOfMonth } from './lib/next/day-of-month';
import { nextYear, nextDayOfYear } from './lib/next/day-of-year';
import { periodHour } from './lib/period/hour';
import { periodDay } from './lib/period/day';
import { periodWeek } from './lib/period/week';
import { periodMonth } from './lib/period/month';
import { periodYear } from './lib/period/year';
import { JalaliDateTimeOptions } from './interface/options';
export declare const JalaliDateTime: (options?: JalaliDateTimeOptions) => {
    now: typeof now;
    toDate: typeof toDate;
    toTime: (date: Date, config?: import("./interface/config").JalaliDateTimeConfig | undefined) => string;
    toString: typeof toString;
    toTitle: (date: Date, config?: import("./interface/config").JalaliDateTimeConfig | undefined) => string;
    toFullText: typeof toFullText;
    toObject: typeof toObject;
    dayOfWeek: typeof dayOfWeek;
    daysInMonth: typeof daysInMonth;
    calendar: typeof calendar;
    gregorian: (jalali: string) => import("./interface/gregorian").JalaliDateTimeGregorian;
    timezones: () => string[];
    nextDay: typeof nextDay;
    nextDayOfWeek: typeof nextDayOfWeek;
    nextMonth: typeof nextMonth;
    nextDayOfMonth: typeof nextDayOfMonth;
    nextYear: typeof nextYear;
    nextDayOfYear: typeof nextDayOfYear;
    periodHour: typeof periodHour;
    periodDay: typeof periodDay;
    periodWeek: typeof periodWeek;
    periodMonth: typeof periodMonth;
    periodYear: typeof periodYear;
};
//# sourceMappingURL=index.d.ts.map